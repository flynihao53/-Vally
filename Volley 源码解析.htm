<!DOCTYPE html>
<html lang="zh-CN"><head><title>Volley 源码解析 Volley 是 Google 在 2013 I/O 大会上推出的 Android 异步网络请求框架和图片加载框架。特别适合数据量小，通信 @codeKK 开源项目源码分析站</title><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1"><meta property="wb:webmaster" content="b781e11b57835e88"><meta name="baidu-site-verification" content="C19QJzFIGo"><link rel="stylesheet" href="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/bootstrap.css"><link rel="stylesheet" href="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/bootstrap-theme.css"><link rel="stylesheet" href="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/theme.css"><link rel="shortcut icon" type="image/ico" href="http://a.codekk.com/images/favicon.ico"><link rel="apple-touch-icon" href="http://a.codekk.com/images/touch-icon-iphone.png"><link rel="apple-touch-icon" sizes="76x76" href="http://a.codekk.com/images/touch-icon-ipad.png"><link rel="apple-touch-icon" sizes="120x120" href="http://a.codekk.com/images/touch-icon-iphone-retina.png"><link rel="apple-touch-icon" sizes="152x152" href="http://a.codekk.com/images/touch-icon-ipad-retina.png"><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/analytics.js" async=""></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/hm.js"></script><script>var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?8f550dd0576b7724ecada0a7be2d12df";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script><link rel="shortlink" href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2542"><meta property="og:type" content="article"><meta property="og:title" content="Volley 源码解析 Volley 是 Google 在 2013 I/O 大会上推出的 Android 异步网络请求框架和图片加载框架。特别适合数据量小，通信 @codeKK 开源项目源码分析站"><meta property="og:url" content="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90"><meta property="article:author" content="http://www.codekk.com/about/"><meta name="alexaVerifyID" content="xsWRpCEQLbJGX1R-yzO0V9DegUo"><meta property="article:section" content="Android开源项目源码解析"><meta property="og:description" content="Volley 源码解析 Volley 是 Google 在 2013 I/O 大会上推出的 Android 异步网络请求框架和图片加载框架。特别适合数据量小，通信 @codeKK 开源项目源码分析站"><meta name="description" content="Volley 源码解析 Volley 是 Google 在 2013 I/O 大会上推出的 Android 异步网络请求框架和图片加载框架。特别适合数据量小，通信 @codeKK 开源项目源码分析站"><meta property="article:tag" content="Android开源"><meta property="article:tag" content="Android开源项目源码"><meta property="article:tag" content="Android开源项目分析"><meta property="article:tag" content="Android开源项目源码分析"><meta property="summary:id" content="54cfab086c4761e5001b2542"><meta property="article:tag" content="Volley"><meta property="article:tag" content="grumoon"><meta property="article:tag" content="Volley 源码解析"><meta property="article:tag" content="Volley"><meta property="article:tag" content="Android Volley"><meta property="article:tag" content="Android网络"><meta property="article:tag" content="Android网络框架"><meta property="article:tag" content="Volley 源码解析"><meta property="article:tag" content="Volley 原理"><meta property="article:tag" content="Volley 分析"><meta property="article:tag" content="深入 Volley"><meta property="article:tag" content="Volley RequestQueue"><meta property="article:tag" content="Volley缓存"><meta property="article:tag" content="Volley"><meta property="article:tag" content="android"><meta property="article:tag" content="android开发"><meta property="article:tag" content="android开发入门"><meta property="article:tag" content="android开发进阶"><meta property="og:site_name" content="codeKK"><script charset="UTF-8" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/embed.js" async="" type="text/javascript"></script><link href="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/embed.css" rel="stylesheet" type="text/css"></head><body role="document"><div style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;" id="BAIDU_DUP_fp_wrapper"><iframe style="width: 0px; height: 0px; visibility: hidden; display: none;" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/o.htm" id="BAIDU_DUP_fp_iframe"></iframe></div><nav id="header" class="navbar navbar-inverse navbar-fixed-top"><div class="container"><input id="isMobile" value="0" type="hidden"><input id="host" value="http://a.codekk.com" type="hidden"><input id="currentUrl" value="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" type="hidden"><input id="page" value="detail" type="hidden"><input id="type" value="open-source-project-analysis" type="hidden"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar" class="navbar-toggle collapsed"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="http://www.codekk.com/" style="font-weight:bold" class="navbar-brand">codeKK</a></div><div id="navbar" class="navbar-collapse collapse"><ul class="nav navbar-nav"><li class="active"><a href="http://a.codekk.com/">源码解析</a></li><li><a href="http://p.codekk.com/">开源项目</a></li><li><a href="http://j.codekk.com/">职位内推</a></li><li><a href="http://b.codekk.com/">文章</a></li><li><a href="http://www.codekk.com/gays">友链</a></li><li><a href="http://r.codekk.com/" style="color:red">今日推荐</a></li><li><a href="http://www.codekk.com/about">我们</a></li></ul><ul class="nav navbar-nav navbar-right"><li><a href="http://a.codekk.com/users/oauth/github">用 GitHub 登陆</a></li></ul></div></div></nav><!-- content--><div role="main" class="container theme-showcase"><div id="tipsDiv" style="display: none;" class="text-center bg-danger div-tips"></div><div class="container col-md-9"><div class="hero-unit"> <h2>Volley 源码解析</h2><div class="div-row"> <input id="isFavorite" value="0" type="hidden"><a> </a><img id="favorite" title="收藏" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/ic_favorite_white.png" onclick="return favOrUnCommon('open-source-project-analysis', '54cfab086c4761e5001b2542')">&nbsp;&nbsp;项目：<a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank">Volley</a>，分析者：<a href="https://github.com/grumoon" target="_blank">grumoon</a>，校对者：<a href="https://github.com/Trinea" target="_blank">Trinea</a></div><blockquote>
<p>本文为 <a href="http://a.codekk.com/" target="_blank">Android 开源项目源码解析</a> 中 Volley 部分<br>项目地址：<a href="https://android.googlesource.com/platform/frameworks/volley/" target="_blank">Volley</a>，分析的版本：<a href="https://android.googlesource.com/platform/frameworks/volley/+/35ce77836d8e1e951b8e4b2ec43e07fb7336dab6" target="_blank">35ce778</a>，Demo 地址：<a href="https://github.com/android-cn/android-open-project-demo/tree/master/volley-demo" target="_blank">Volley Demo</a><br>分析者：<a href="https://github.com/grumoon" target="_blank">grumoon</a>，校对者：<a href="https://github.com/huxian99" target="_blank">huxian99</a>、<a href="https://github.com/trinea" target="_blank">Trinea</a>，校对状态：完成   </p>
</blockquote>
<h3 id="1-">1. 功能介绍</h3>
<h4 id="1-1-volley">1.1. Volley</h4>
<p>Volley 是 Google 推出的 Android 异步网络请求框架和图片加载框架。在 Google I/O 2013 大会上发布。</p>
<blockquote>
<p>名字由来：a burst or emission of many things or a large amount at once<br>发布演讲时候的配图<br><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/volley.png" alt="Volley"></p>
</blockquote>
<p>从名字由来和配图中无数急促的火箭可以看出 Volley 的特点：特别适合<strong>数据量小，通信频繁</strong>的网络操作。（个人认为 Android 应用中绝大多数的网络操作都属于这种类型）。</p>
<h4 id="1-2-volley-">1.2 Volley 的主要特点</h4>
<p>(1). 扩展性强。Volley 中大多是基于接口的设计，可配置性强。<br>(2). 一定程度符合 Http 规范，包括返回 ResponseCode(2xx、3xx、4xx、5xx）的处理，请求头的处理，缓存机制的支持等。并支持重试及优先级定义。<br>(3). 默认 Android2.3 及以上基于 HttpURLConnection，2.3 以下基于 HttpClient 实现，这两者的区别及优劣在<code>4.2.1 Volley</code>中具体介绍。<br>(4). 提供简便的图片加载工具。  </p>
<h3 id="2-">2. 总体设计</h3>
<h4 id="2-1-">2.1 总体设计图</h4>
<p><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/design.png" alt="总体设计图"><br>上面是 Volley 的总体设计图，主要是通过两种<code>Dispatch Thread</code>不断从<code>RequestQueue</code>中取出请求，根据是否已缓存调用<code>Cache</code>或<code>Network</code>这两类数据获取接口之一，从内存缓存或是服务器取得请求的数据，然后交由<code>ResponseDelivery</code>去做结果分发及回调处理。  </p>
<h4 id="2-2-volley-">2.2 Volley 中的概念</h4>
<p>简单介绍一些概念，在<code>详细设计</code>中会仔细介绍。<br>Volley 的调用比较简单，通过 newRequestQueue(…) 函数新建并启动一个请求队列<code>RequestQueue</code>后，只需要往这个<code>RequestQueue</code>不断 add Request 即可。  </p>
<p><strong>Volley：</strong>Volley 对外暴露的 API，通过 newRequestQueue(…) 函数新建并启动一个请求队列<code>RequestQueue</code>。  </p>
<p><strong>Request：</strong>表示一个请求的抽象类。<code>StringRequest</code>、<code>JsonRequest</code>、<code>ImageRequest</code> 都是它的子类，表示某种类型的请求。  </p>
<p><strong>RequestQueue：</strong>表示请求队列，里面包含一个<code>CacheDispatcher</code>(用于处理走缓存请求的调度线程)、<code>NetworkDispatcher</code>数组(用于处理走网络请求的调度线程)，一个<code>ResponseDelivery</code>(返回结果分发接口)，通过 start() 函数启动时会启动<code>CacheDispatcher</code>和<code>NetworkDispatchers</code>。  </p>
<p><strong>CacheDispatcher：</strong>一个线程，用于调度处理走缓存的请求。启动后会不断从缓存请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给<code>ResponseDelivery</code>去执行后续处理。当结果未缓存过、缓存失效或缓存需要刷新的情况下，该请求都需要重新进入<code>NetworkDispatcher</code>去调度处理。  </p>
<p><strong>NetworkDispatcher：</strong>一个线程，用于调度处理走网络的请求。启动后会不断从网络请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给<code>ResponseDelivery</code>去执行后续处理，并判断结果是否要进行缓存。  </p>
<p><strong>ResponseDelivery：</strong>返回结果分发接口，目前只有基于<code>ExecutorDelivery</code>的在入参 handler 对应线程内进行分发。  </p>
<p><strong>HttpStack：</strong>处理 Http 请求，返回请求结果。目前 Volley 中有基于 HttpURLConnection 的<code>HurlStack</code>和 基于 Apache HttpClient 的<code>HttpClientStack</code>。  </p>
<p><strong>Network：</strong>调用<code>HttpStack</code>处理请求，并将结果转换为可被<code>ResponseDelivery</code>处理的<code>NetworkResponse</code>。  </p>
<p><strong>Cache：</strong>缓存请求结果，Volley 默认使用的是基于 sdcard 的<code>DiskBasedCache</code>。<code>NetworkDispatcher</code>得到请求结果后判断是否需要存储在 Cache，<code>CacheDispatcher</code>会从 Cache 中取缓存结果。  </p>
<h3 id="3-">3. 流程图</h3>
<p>Volley 请求流程图<br><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/Volley-run-flow-chart.png" alt="Volley 请求流程图">  </p>
<blockquote>
<p><strong>上图是 Volley 请求时的流程图，在  Volley 的发布演讲中给出，我在这里将其用中文重新画出。</strong>   </p>
</blockquote>
<h3 id="4-">4. 详细设计</h3>
<h4 id="4-1-">4.1 类关系图</h4>
<p><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/volley-class.png" alt="类关系图"><br>这是 Volley 框架的主要类关系图    </p>
<blockquote>
<p>图中<strong>红色圈内</strong>的部分，组成了 Volley 框架的核心，围绕 RequestQueue 类，将各个功能点以<strong>组合</strong>的方式结合在了一起。各个功能点也都是以<strong>接口</strong>或者<strong>抽象类</strong>的形式提供。<br>红色圈外面的部分，在 Volley 源码中放在了 toolbox 包中，作为 Volley 为各个功能点提供的默认的具体实现。<br>通过类图我们看出， Volley 有着非常好的拓展性。通过各个功能点的接口，我们可以给出自定义的，更符合我们需求的具体实现。</p>
<p><strong>多用组合，少用继承；针对接口编程，不针对具体实现编程。</strong>  </p>
<p><strong>优秀框架的设计，令人叫绝，受益良多。</strong>  </p>
</blockquote>
<h3 id="4-2-">4.2 核心类功能介绍</h3>
<h4 id="4-2-1-volley-java">4.2.1 Volley.java</h4>
<p>这个和 Volley 框架同名的类，其实是个工具类，作用是构建一个可用于添加网络请求的<code>RequestQueue</code>对象。<br><strong>(1). 主要函数</strong><br>Volley.java 有两个重载的静态方法。  </p>
<pre><code class="lang-java">public static RequestQueue newRequestQueue(Context context)

public static RequestQueue newRequestQueue(Context context, HttpStack stack)
</code></pre>
<p>第一个方法的实现调用了第二个方法，传 HttpStack 参数为 null。<br>第二个方法中，如果 HttpStatck 参数为 
null，则如果系统在 Gingerbread 及之后(即 API Level &gt;= 9)，采用基于 HttpURLConnection 的
 HurlStack，如果小于 9，采用基于 HttpClient 的 HttpClientStack。  </p>
<pre><code class="lang-java">if (stack == null) {
    if (Build.VERSION.SDK_INT &gt;= 9) {
        stack = new HurlStack();
    } else {
        stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
    }
}
</code></pre>
<p>得到了 HttpStack,然后通过它构造一个代表网络（Network）的具体实现<code>BasicNetwork</code>。<br>接着构造一个代表缓存（Cache）的基于 Disk 的具体实现<code>DiskBasedCache</code>。<br>最后将网络（Network）对象和缓存（Cache）对象传入构建一个 RequestQueue，启动这个 RequestQueue，并返回。</p>
<pre><code class="lang-java">Network network = new BasicNetwork(stack);
RequestQueue queue = new RequestQueue(new DiskBasedCache(cacheDir), network);
queue.start();
return queue;
</code></pre>
<blockquote>
<p>我们平时大多采用<code>Volly.newRequestQueue(context)</code>的默认实现，构建 RequestQueue。<br>通过源码可以看出，我们可以抛开 Volley 工具类构建自定义的 RequestQueue，采用自定义的<code>HttpStatck</code>，采用自定义的<code>Network</code>实现，采用自定义的 Cache 实现等来构建<code>RequestQueue</code>。<br><strong>优秀框架的高可拓展性的魅力来源于此啊</strong></p>
</blockquote>
<p><strong>(2). HttpURLConnection 和 AndroidHttpClient(HttpClient 的封装)如何选择及原因：</strong><br>在 Froyo(2.2) 之前，HttpURLConnection 有个重大 Bug，调用 close() 函数会影响连接池，导致连接复用失效，所以在 Froyo 之前使用 HttpURLConnection 需要关闭 keepAlive。<br>另外在 Gingerbread(2.3) HttpURLConnection 默认开启了 gzip 压缩，提高了 HTTPS 的性能，Ice Cream Sandwich(4.0) HttpURLConnection 支持了请求结果缓存。<br>再加上 HttpURLConnection 本身 API 相对简单，所以对 Android 来说，在 2.3 之后建议使用 HttpURLConnection，之前建议使用 AndroidHttpClient。  </p>
<p><strong>(3). 关于 User Agent</strong><br>通过代码我们发现如果是使用 
AndroidHttpClient，Volley 还会将请求头中的 User-Agent 字段设置为 App 的 
${packageName}/${versionCode}，如果异常则使用 "volley/0"，不过这个获取 User-Agent 
的操作应该放到 if else 内部更合适。而对于 HttpURLConnection 却没有任何操作，为什么呢？<br>如果用 <a href="http://www.trinea.cn/android/android-network-sniffer/" target="_blank">Fiddler 或 Charles</a> 对数据抓包我们会发现，我们会发现 HttpURLConnection 默认是有 User-Agent 的，类似：  </p>
<pre><code class="lang-xml">Dalvik/1.6.0 (Linux; U; Android 4.1.1; Google Nexus 4 - 4.1.1 - API 16 - 768x1280_1 Build/JRO03S)
</code></pre>
<p>经常用 WebView 的同学会也许会发现似曾相识，是的，WebView 默认的 User-Agent 
也是这个。实际在请求发出之前，会检测 User-Agent 是否为空，如果不为空，则加上系统默认 User-Agent。在 Android 
2.1 之后，我们可以通过</p>
<pre><code class="lang-java">String userAgent = System.getProperty("http.agent");
</code></pre>
<p>得到系统默认的 User-Agent，Volley 如果希望自定义 User-Agent，可在自定义 Request 中重写 getHeaders() 函数</p>
<pre><code class="lang-java">@Override
public Map&lt;String, String&gt; getHeaders() throws AuthFailureError {
    // self-defined user agent
    Map&lt;String, String&gt; headerMap = new HashMap&lt;String, String&gt;();
    headerMap.put("User-Agent", "android-open-project-analysis/1.0");
    return headerMap;
}
</code></pre>
<h4 id="4-2-2-request-java">4.2.2 Request.java</h4>
<p>代表一个网络请求的抽象类。我们通过构建一个<code>Request</code>类的非抽象子类(StringRequest、JsonRequest、ImageRequest 或自定义)对象，并将其加入到·RequestQueue·中来完成一次网络请求操作。<br>Volley 支持 8 种 Http 请求方式 <strong>GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH</strong><br>Request 类中包含了请求 url，请求请求方式，请求 Header，请求 Body，请求的优先级等信息。  </p>
<p><strong>因为是抽象类，子类必须重写的两个方法。</strong>  </p>
<pre><code class="lang-java">abstract protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response);
</code></pre>
<p>子类重写此方法，将网络返回的原生字节内容，转换成合适的类型。此方法会在工作线程中被调用。  </p>
<pre><code class="lang-java">abstract protected void deliverResponse(T response);
</code></pre>
<p>子类重写此方法，将解析成合适类型的内容传递给它们的监听回调。</p>
<p><strong>以下两个方法也经常会被重写</strong></p>
<pre><code class="lang-java">public byte[] getBody()
</code></pre>
<p>重写此方法，可以构建用于 POST、PUT、PATCH 请求方式的 Body 内容。</p>
<pre><code class="lang-java">protected Map&lt;String, String&gt; getParams()
</code></pre>
<p>在上面<code>getBody</code>函数没有被重写情况下，此方法的返回值会被 key、value 分别编码后拼装起来转换为字节码作为 Body 内容。  </p>
<h4 id="4-2-3-requestqueue-java">4.2.3 RequestQueue.java</h4>
<p>Volley 框架的核心类，将请求 Request 加入到一个运行的<code>RequestQueue</code>中，来完成请求操作。</p>
<h4 id="-1-">(1). 主要成员变量</h4>
<p>RequestQueue 中维护了两个<strong>基于优先级</strong>的 Request 队列，缓存请求队列和网络请求队列。<br>放在缓存请求队列中的 Request，将通过缓存获取数据；放在网络请求队列中的 Request，将通过网络获取数据。  </p>
<pre><code class="lang-java">private final PriorityBlockingQueue&lt;Request&lt;?&gt;&gt; mCacheQueue = new PriorityBlockingQueue&lt;Request&lt;?&gt;&gt;();
private final PriorityBlockingQueue&lt;Request&lt;?&gt;&gt; mNetworkQueue = new PriorityBlockingQueue&lt;Request&lt;?&gt;&gt;();
</code></pre>
<p>维护了一个正在进行中，尚未完成的请求集合。   </p>
<pre><code class="lang-java">private final Set&lt;Request&lt;?&gt;&gt; mCurrentRequests = new HashSet&lt;Request&lt;?&gt;&gt;();
</code></pre>
<p>维护了一个等待请求的集合，如果一个请求正在被处理并且可以被缓存，后续的相同 url 的请求，将进入此等待队列。  </p>
<pre><code class="lang-java">private final Map&lt;String, Queue&lt;Request&lt;?&gt;&gt;&gt; mWaitingRequests = new HashMap&lt;String, Queue&lt;Request&lt;?&gt;&gt;&gt;();
</code></pre>
<h4 id="-2-">(2). 启动队列</h4>
<p>创建出 RequestQueue 以后，调用 start 方法，启动队列。  </p>
<pre><code class="lang-java">/**
 * Starts the dispatchers in this queue.
 */
public void start() {
    stop();  // Make sure any currently running dispatchers are stopped.
    // Create the cache dispatcher and start it.
    mCacheDispatcher = new CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);
    mCacheDispatcher.start();

    // Create network dispatchers (and corresponding threads) up to the pool size.
    for (int i = 0; i &lt; mDispatchers.length; i++) {
        NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,
                mCache, mDelivery);
        mDispatchers[i] = networkDispatcher;
        networkDispatcher.start();
    }
}
</code></pre>
<p>start 方法中，开启一个<strong>缓存调度线程<code>CacheDispatcher</code></strong>和 n 个<strong>网络调度线程<code>NetworkDispatcher</code></strong>，这里 n 默认为 4，存在优化的余地，比如可以根据 CPU 核数以及网络类型计算更合适的并发数。<br>缓存调度线程不断的从缓存请求队列中取出 Request 去处理，网络调度线程不断的从网络请求队列中取出 Request 去处理。  </p>
<h4 id="-3-">(3). 加入请求</h4>
<pre><code class="lang-java">public &lt;T&gt; Request&lt;T&gt; add(Request&lt;T&gt; request);
</code></pre>
<p>流程图如下：<br><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/RequestQueue-add-flow-chart.png" alt="加入请求流程图">  </p>
<h4 id="-4-">(4). 请求完成</h4>
<pre><code class="lang-java">void finish(Request&lt;?&gt; request)
</code></pre>
<p>Request 请求结束  </p>
<blockquote>
<p>(1). 首先从正在进行中请求集合<code>mCurrentRequests</code>中移除该请求。<br>(2). 然后查找请求等待集合<code>mWaitingRequests</code>中是否存在等待的请求，如果存在，则将等待队列移除，并将等待队列所有的请求添加到缓存请求队列中，让缓存请求处理线程<code>CacheDispatcher</code>自动处理。  </p>
</blockquote>
<h4 id="-5-">(5). 请求取消</h4>
<pre><code class="lang-java">public void cancelAll(RequestFilter filter)
public void cancelAll(final Object tag)
</code></pre>
<p>取消当前请求集合中所有符合条件的请求。<br>filter 参数表示可以按照自定义的过滤器过滤需要取消的请求。<br>tag 表示按照<code>Request.setTag</code>设置好的 tag 取消请求，比如同属于某个 Activity 的。  </p>
<h4 id="4-2-4-cachedispatcher-java">4.2.4 CacheDispatcher.java</h4>
<p>一个线程，用于调度处理走缓存的请求。启动后会不断从缓存请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给<code>ResponseDelivery</code> 去执行后续处理。当结果未缓存过、缓存失效或缓存需要刷新的情况下，该请求都需要重新进入<code>NetworkDispatcher</code>去调度处理。  </p>
<h4 id="-1-">(1). 成员变量</h4>
<p><code>BlockingQueue&lt;Request&lt;?&gt;&gt; mCacheQueue</code> 缓存请求队列<br><code>BlockingQueue&lt;Request&lt;?&gt;&gt; mNetworkQueue</code> 网络请求队列<br><code>Cache mCache</code> 缓存类，代表了一个可以获取请求结果，存储请求结果的缓存<br><code>ResponseDelivery mDelivery</code> 请求结果传递类  </p>
<h4 id="-2-">(2). 处理流程图</h4>
<p><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/CacheDispatcher-run-flow-chart.png" alt="缓存调度线程处理流程图">  </p>
<h4 id="4-2-5-networkdispatcher-java">4.2.5 NetworkDispatcher.java</h4>
<p>一个线程，用于调度处理走网络的请求。启动后会不断从网络请求队列中取请求处理，队列为空则等待，请求处理结束则将结果传递给 ResponseDelivery 去执行后续处理，并判断结果是否要进行缓存。</p>
<h4 id="-1-">(1). 成员变量</h4>
<p><code>BlockingQueue&lt;Request&lt;?&gt;&gt; mQueue</code> 网络请求队列<br><code>Network mNetwork</code> 网络类，代表了一个可以执行请求的网络<br><code>Cache mCache</code>  缓存类，代表了一个可以获取请求结果，存储请求结果的缓存<br><code>ResponseDelivery mDelivery</code> 请求结果传递类，可以传递请求的结果或者错误到调用者  </p>
<h4 id="-2-">(2). 处理流程图</h4>
<p><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/NetworkDispatcher-run-flow-chart.png" alt="网络调度线程处理流程图">  </p>
<h4 id="4-2-6-cache-java">4.2.6 Cache.java</h4>
<p>缓存接口，代表了一个可以获取请求结果，存储请求结果的缓存。</p>
<h4 id="-1-">(1). 主要方法：</h4>
<p><code>public Entry get(String key);</code> 通过 key 获取请求的缓存实体<br><code>public void put(String key, Entry entry);</code> 存入一个请求的缓存实体<br><code>public void remove(String key);</code> 移除指定的缓存实体<br><code>public void clear();</code> 清空缓存  </p>
<h4 id="-2-entry">(2). 代表缓存实体的内部类 Entry</h4>
<p>成员变量和方法<br><code>byte[] data</code> 请求返回的数据（Body 实体）<br><code>String etag</code> Http 响应首部中用于缓存新鲜度验证的 ETag<br><code>long serverDate</code> Http 响应首部中的响应产生时间<br><code>long ttl</code> 缓存的过期时间<br><code>long softTtl</code> 缓存的新鲜时间<br><code>Map&lt;String, String&gt; responseHeaders</code> 响应的 Headers<br><code>boolean isExpired()</code> 判断缓存是否过期，过期缓存不能继续使用<br><code>boolean refreshNeeded()</code> 判断缓存是否新鲜，不新鲜的缓存需要发到服务端做新鲜度的检测  </p>
<h4 id="4-2-7-diskbasedcache-java">4.2.7 DiskBasedCache.java</h4>
<p>继承 Cache 类，基于 Disk 的缓存实现类。</p>
<h4 id="-1-">(1). 主要方法：</h4>
<p><code>public synchronized void initialize()</code> 初始化，扫描缓存目录得到所有缓存数据摘要信息放入内存。<br><code>public synchronized Entry get(String key)</code> 从缓存中得到数据。先从摘要信息中得到摘要信息，然后读取缓存数据文件得到内容。<br><code>public synchronized void put(String key, Entry entry)</code> 将数据存入缓存内。先检查缓存是否会满，会则先删除缓存中部分数据，然后再新建缓存文件。<br><code>private void pruneIfNeeded(int neededSpace)</code> 检查是否能再分配 neededSpace 字节的空间，如果不能则删除缓存中部分数据。<br><code>public synchronized void clear()</code> 清空缓存。
<code>public synchronized void remove(String key)</code> 删除缓存中某个元素。  </p>
<h4 id="-2-cacheheader-">(2). CacheHeader 类</h4>
<p>CacheHeader 是缓存文件摘要信息，存储在缓存文件的头部，与上面的<code>Cache.Entry</code>相似。  </p>
<h4 id="4-2-8-nocache-java">4.2.8 NoCache.java</h4>
<p>继承 Cache 类，不做任何操作的缓存实现类，可将它作为构建<code>RequestQueue</code>的参数以实现一个不带缓存的请求队列。  </p>
<h4 id="4-2-9-network-java">4.2.9 Network.java</h4>
<p>代表网络的接口，处理网络请求。<br>唯一的方法，用于执行特定请求。  </p>
<pre><code class="lang-java">public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError;
</code></pre>
<h4 id="4-2-10-networkresponse-java">4.2.10 NetworkResponse.java</h4>
<p><code>Network</code>中方法 performRequest 的返回值，<code>Request</code>的 parseNetworkResponse(…) 方法入参，是 Volley 中用于内部 Response 转换的一级。<br>封装了网络请求响应的 StatusCode，Headers 和 Body 等。  </p>
<h4 id="-1-">(1). 成员变量</h4>
<p><code>int statusCode</code> Http 响应状态码<br><code>byte[] data</code> Body 数据<br><code>Map&lt;String, String&gt; headers</code> 响应 Headers<br><code>boolean notModified</code> 表示是否为 304 响应<br><code>long networkTimeMs</code> 请求耗时  </p>
<h4 id="-2-volley-response-">(2). Volley 的内部 Response 转换流程图</h4>
<p><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/response-process-flow-chart.png" alt="Volley"><br>从上到下表示从得到数据后一步步的处理，箭头旁的注释表示该步处理后的实体类。  </p>
<h4 id="4-2-11-basicnetwork-java">4.2.11 BasicNetwork.java</h4>
<p>实现 Network，Volley 中默认的网络接口实现类。调用<code>HttpStack</code>处理请求，并将结果转换为可被<code>ResponseDelivery</code>处理的<code>NetworkResponse</code>。<br>主要实现了以下功能：<br>(1). 利用 HttpStack 执行网络请求。<br>(2). 如果 Request 中带有实体信息，如 Etag,Last-Modify 等，则进行缓存新鲜度的验证，并处理 304（Not Modify）响应。<br>(3). 如果发生超时，认证失败等错误，进行重试操作，直到成功、抛出异常(不满足重试策略等)结束。  </p>
<h4 id="4-2-12-httpstack-java">4.2.12 HttpStack.java</h4>
<p>用于处理 Http 请求，返回请求结果的接口。目前 Volley 中的实现有基于 HttpURLConnection 的 HurlStack 和 基于 Apache HttpClient 的 HttpClientStack。<br>唯一方法，执行请求  </p>
<pre><code class="lang-java">public HttpResponse performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)
        throws IOException, AuthFailureError;
</code></pre>
<p>执行 Request 代表的请求，第二个参数表示发起请求之前，添加额外的请求 Headers。  </p>
<h4 id="4-2-13-httpclientstack-java">4.2.13 HttpClientStack.java</h4>
<p>实现 HttpStack 接口，利用 Apache 的 HttpClient 进行各种请求方式的请求。<br>基本就是 org.apache.http 包下面相关类的常见用法，不做详解，不过与下面 HttpURLConnection 做下对比就能发现 HttpURLConnection 的 API 相对简单的多。  </p>
<h4 id="4-2-14-hurlstack-java">4.2.14 HurlStack.java</h4>
<p>实现 HttpStack 接口，利用 Java 的 HttpURLConnection 进行各种请求方式的请求。  </p>
<h4 id="4-2-15-response-java">4.2.15 Response.java</h4>
<p>封装了经过解析后的数据，用于传输。并且有两个内部接口 Listener 和 ErrorListener 分别可表示请求失败和成功后的回调。<br>Response 的构造函数被私有化，而通过两个函数名更易懂的静态方法构建对象。  </p>
<h4 id="4-2-16-bytearraypool-java">4.2.16 ByteArrayPool.java</h4>
<p>byte[] 的回收池，用于 byte[] 的回收再利用，减少了内存的分配和回收。
主要通过一个元素长度从小到大排序的<code>ArrayList</code>作为 byte[] 的缓存，另有一个按使用时间先后排序的<code>ArrayList</code>属性用于缓存满时清理元素。  </p>
<pre><code class="lang-java">public synchronized void returnBuf(byte[] buf)
</code></pre>
<p>将用过的 byte[] 回收，根据 byte[] 长度按照从小到大的排序将 byte[] 插入到缓存中合适位置。  </p>
<pre><code class="lang-java">public synchronized byte[] getBuf(int len)
</code></pre>
<p>获取长度不小于 len 的 byte[]，遍历缓存，找出第一个长度大于传入参数<code>len</code>的 byte[]，并返回；如果最终没有合适的 byte[]，new 一个返回。  </p>
<pre><code class="lang-java">private synchronized void trim()
</code></pre>
<p>当缓存的 byte 超过预先设置的大小时，按照先进先出的顺序删除最早的 byte[]。  </p>
<h4 id="4-2-17-poolingbytearrayoutputstream-java">4.2.17 PoolingByteArrayOutputStream.java</h4>
<p>继承 ByteArrayOutputStream，原始 ByteArrayOutputStream 中用于接受写入 bytes 的 
buf，每次空间不足时便会 new 更大容量的 byte[]，而 PoolingByteArrayOutputStream 使用了 
ByteArrayPool 作为 Byte[] 缓存来减少这种操作，从而提高性能。  </p>
<h4 id="4-2-18-httpheaderparser-java">4.2.18 HttpHeaderParser.java</h4>
<p>Http header 的解析工具类，在 Volley 中主要作用是用于解析 Header 从而判断返回结果是否需要缓存，如果需要返回 Header 中相关信息。<br>有三个方法  </p>
<pre><code class="lang-java">public static long parseDateAsEpoch(String dateStr)
</code></pre>
<p>解析时间，将 RFC1123 的时间格式，解析成 epoch 时间</p>
<pre><code class="lang-java">public static String parseCharset(Map&lt;String, String&gt; headers)
</code></pre>
<p>解析编码集，在 Content-Type 首部中获取编码集，如果没有找到，默认返回 ISO-8859-1</p>
<pre><code class="lang-java">public static Cache.Entry parseCacheHeaders(NetworkResponse response)
</code></pre>
<p><strong>比较重要的方法</strong>，通过网络响应中的缓存控制 Header 和 Body 内容，构建缓存实体。如果 Header 的 Cache-Control 字段含有<code>no-cache</code>或<code>no-store</code>表示不缓存，返回 null。<br>(1). 根据 Date 首部，获取响应生成时间<br>(2). 根据 ETag 首部，获取响应实体标签<br>(3). 根据 Cache－Control 和 Expires 首部，计算出缓存的过期时间，和缓存的新鲜度时间</p>
<blockquote>
<p>两点需要说明下：<br>1.没有处理<code>Last-Modify</code>首部，而是处理存储了<code>Date</code>首部，并在后续的新鲜度验证时，使用<code>Date</code>来构建<code>If-Modified-Since</code>。
这与 Http 1.1 的语义有些违背。<br>2.计算过期时间，Cache－Control 首部优先于 Expires 首部。  </p>
</blockquote>
<h4 id="4-2-19-retrypolicy-java">4.2.19 RetryPolicy.java</h4>
<p>重试策略接口<br>有三个方法：  </p>
<pre><code class="lang-java">public int getCurrentTimeout();
</code></pre>
<p>获取当前请求用时（用于 Log）</p>
<pre><code class="lang-java">public int getCurrentRetryCount();
</code></pre>
<p>获取已经重试的次数（用于 Log）</p>
<pre><code class="lang-java">public void retry(VolleyError error) throws VolleyError;
</code></pre>
<p>确定是否重试，参数为这次异常的具体信息。在请求异常时此接口会被调用，可在此函数实现中抛出传入的异常表示停止重试。  </p>
<h4 id="4-2-20-defaultretrypolicy-java">4.2.20 DefaultRetryPolicy.java</h4>
<p>实现 RetryPolicy，Volley 默认的重试策略实现类。主要通过在 retry(…) 函数中判断重试次数是否达到上限确定是否继续重试。<br>其中<code>mCurrentRetryCount</code>变量表示已经重试次数。<br><code>mBackoffMultiplier</code>表示每次重试之前的 timeout 该乘以的因子。<br><code>mCurrentTimeoutMs</code>变量表示当前重试的 timeout 时间，会以<code>mBackoffMultiplier</code>作为因子累计前几次重试的 timeout。  </p>
<h4 id="4-2-21-responsedelivery-java">4.2.21 ResponseDelivery.java</h4>
<p>请求结果的传输接口，用于传递请求结果或者请求错误。<br>有三个方法：  </p>
<pre><code class="lang-java">public void postResponse(Request&lt;?&gt; request, Response&lt;?&gt; response);
</code></pre>
<p>此方法用于传递请求结果，<code>request</code> 和 <code>response</code> 参数分别表示请求信息和返回结果信息。  </p>
<pre><code class="lang-java">public void postResponse(Request&lt;?&gt; request, Response&lt;?&gt; response, Runnable runnable);
</code></pre>
<p>此方法用于传递请求结果，并在完成传递后执行 Runnable。</p>
<pre><code class="lang-java">public void postError(Request&lt;?&gt; request, VolleyError error);
</code></pre>
<p>此方法用于传输请求错误。  </p>
<h4 id="4-2-22-executordelivery-java">4.2.22 ExecutorDelivery.java</h4>
<p>请求结果传输接口具体实现类。<br>在 Handler 对应线程中传输缓存调度线程或者网络调度线程中产生的请求结果或请求错误，会在请求成功的情况下调用 Request.deliverResponse(…) 函数，失败时调用 Request.deliverError(…) 函数。  </p>
<h4 id="4-2-23-stringrequest-java">4.2.23 StringRequest.java</h4>
<p>继承 Request 类,代表了一个返回值为 String 的请求。将网络返回的结果数据解析为 String 类型。通过构造函数的 listener 传参，支持请求成功后的 onResponse(…) 回调。  </p>
<h4 id="4-2-24-jsonrequest-java">4.2.24 JsonRequest.java</h4>
<p>抽象类，继承自 Request，代表了 body 为 JSON 的请求。提供了构建 JSON 请求参数的方法。  </p>
<h4 id="4-2-25-jsonobjectrequest-java">4.2.25 JsonObjectRequest.java</h4>
<p>继承自 JsonRequest，将网络返回的结果数据解析为 JSONObject 类型。  </p>
<h4 id="4-2-26-jsonarrayrequest-java">4.2.26 JsonArrayRequest.java</h4>
<p>继承自 JsonRequest，将网络返回的结果数据解析为 JSONArray 类型。  </p>
<h4 id="4-2-27-imagerequest-java">4.2.27 ImageRequest.java</h4>
<p>继承 Request 类，代表了一个返回值为 Image 的请求。将网络返回的结果数据解析为 Bitmap 类型。<br>可以设置图片的最大宽度和最大高度，并计算出合适尺寸返回。每次最多解析一张图片防止 OOM。  </p>
<h4 id="4-2-28-imageloader-java">4.2.28 ImageLoader.java</h4>
<p>封装了 ImageRequst 的方便使用的图片加载工具类。 </p>
<blockquote>
<p>1.可以设置自定义的<code>ImageCache</code>，可以是内存缓存，也可以是 Disk 缓存，将获取的图片缓存起来，重复利用，减少请求。<br>2.可以定义图片请求过程中显示的图片和请求失败后显示的图片。<br>3.相同请求（相同地址，相同大小）只发送一个，可以避免重复请求。<br>// TODO  </p>
</blockquote>
<h4 id="4-2-29-networkimageview-java">4.2.29 NetworkImageView.java</h4>
<p>利用 ImageLoader，可以加载网络图片的 ImageView<br>有三个公开的方法：  </p>
<pre><code class="lang-java">public void setDefaultImageResId(int defaultImage)
</code></pre>
<p>设置默认图片，加载图片过程中显示。  </p>
<pre><code class="lang-java">public void setErrorImageResId(int errorImage)
</code></pre>
<p>设置错误图片，加载图片失败后显示。  </p>
<pre><code class="lang-java">public void setImageUrl(String url, ImageLoader imageLoader)
</code></pre>
<p>设置网络图片的 Url 和 ImageLoader，将利用这个 ImageLoader 去获取网络图片。  </p>
<blockquote>
<p>如果有新的图片加载请求，会把这个 ImageView 上旧的加载请求取消。  </p>
</blockquote>
<h4 id="4-2-30-clearcacherequest-java">4.2.30 ClearCacheRequest.java</h4>
<p>用于人为清空 Http 缓存的请求。<br>添加到 RequestQueue 后能很快执行，因为优先级很高，为<code>Priority.IMMEDIATE</code>。并且清空缓存的方法<code>mCache.clear()</code>写在了<code>isCanceled()</code>方法体中，能最早的得到执行。  </p>
<p>ClearCacheRequest 的写法不敢苟同，目前看来唯一的好处就是可以将清空缓存操作也当做一个请求。而在<code>isCanceled()</code>中做清空操作本身就造成了歧义，不看源码没人知道在<code>NetworkDispatcher</code> run 方法循环的过程中，<code>isCanceled()</code>这个读操作竟然做了可能造成缓存被清空。只能跟源码的解释一样当做一个 Hack 操作。  </p>
<h4 id="4-2-31-authenticator-java">4.2.31 Authenticator.java</h4>
<p>身份认证接口，用于基本认证或者摘要认证。这个类是 Volley 用于和身份验证打通的接口，比如 OAuth，不过目前的使用不是特别广泛和 Volley 的内部结合也不是特别紧密。  </p>
<h4 id="4-2-32-androidauthenticator-java">4.2.32 AndroidAuthenticator.java</h4>
<p>继承 Authenticator，基于 Android AccountManager 的认证交互实现类。  </p>
<h4 id="4-2-33-volleylog-java">4.2.33 VolleyLog.java</h4>
<p>Volley 的 Log 工具类。  </p>
<h4 id="4-2-34-volleyerror-java">4.2.34 VolleyError.java</h4>
<p>Volley 中所有错误异常的父类，继承自 Exception，可通过此类设置和获取 NetworkResponse 或者请求的耗时。  </p>
<h4 id="4-2-35-authfailureerror-java">4.2.35 AuthFailureError.java</h4>
<p>继承自 VolleyError，代表请求认证失败错误，如 RespondeCode 的 401 和 403。  </p>
<h4 id="4-2-36-networkerror-java">4.2.36 NetworkError.java</h4>
<p>继承自 VolleyError，代表网络错误。  </p>
<h4 id="4-2-37-parseerror-java">4.2.37 ParseError.java</h4>
<p>继承自 VolleyError，代表内容解析错误。  </p>
<h4 id="4-2-38-servererror-java">4.2.38 ServerError.java</h4>
<p>继承自 VolleyError，代表服务端错误。  </p>
<h4 id="4-2-39-timeouterror-java">4.2.39 TimeoutError.java</h4>
<p>继承自 VolleyError，代表请求超时错误。  </p>
<h4 id="4-2-40-noconnectionerror-java">4.2.40 NoConnectionError.java</h4>
<p>继承自 NetworkError，代表无法建立连接错误。  </p>
<h3 id="5-">5. 杂谈</h3>
<h4 id="5-1-http-">5.1 关于 Http 缓存</h4>
<p>Volley 构建了一套相对完整的符合 Http 语义的缓存机制。<br><strong>优点和特点</strong><br>(1). 根据<code>Cache-Control</code>和<code>Expires</code>首部来计算缓存的过期时间。如果两个首部都存在情况下，以<code>Cache-Control</code>为准。<br>(2). 利用<code>If-None-Match</code>和<code>If-Modified-Since</code>对过期缓存或者不新鲜缓存，进行请求再验证，并处理 304 响应，更新缓存。<br>(3). 默认的缓存实现，将缓存以文件的形式存储在 Disk，程序退出后不会丢失。</p>
<p><strong>我个人认为的不足之处</strong><br>缓存的再验证方面，在构建<code>If-Modified-Since</code>请求首部时，Volley 使用了服务端响应的<code>Date</code>首部，没有使用<code>Last-Modified</code>首部。整个框架没有使用<code>Last-Modified</code>首部。这与 Http 语义不符。    </p>
<pre><code class="lang-java">private void addCacheHeaders(Map&lt;String, String&gt; headers, Cache.Entry entry) {
    // If there's no cache entry, we're done.
    if (entry == null) {
        return;
    }

    if (entry.etag != null) {
        headers.put("If-None-Match", entry.etag);
    }

    if (entry.serverDate &gt; 0) {
        Date refTime = new Date(entry.serverDate);
        headers.put("If-Modified-Since", DateUtils.formatDate(refTime));
    }
}
</code></pre>
<p>服务端根据请求时通过<code>If-Modified-Since</code>首部传过来的时间，判断资源文件是否在<code>If-Modified-Since</code>时间 <strong>以后</strong> 有改动，如果有改动，返回新的请求结果。如果没有改动，返回 304 not modified。<br><code>Last-Modified</code>代表了资源文件的最后修改时间。通常使用这个首部构建<code>If-Modified-Since</code>的时间。<br><code>Date</code>代表了响应产生的时间，正常情况下<code>Date</code>时间在<code>Last-Modified</code>时间之后。也就是<code>Date</code>&gt;=<code>Last-Modified</code>。<br>通过以上原理，既然<code>Date</code>&gt;=<code>Last-Modified</code>。那么我利用<code>Date</code>构建，也是完全正确的。  </p>
<p><strong>可能的问题出在服务端的 Http 实现上，如果服务端完全遵守 Http 语义，采用时间比较的方式来验证<code>If-Modified-Since</code>，判断服务器资源文件修改时间是不是在<code>If-Modified-Since</code>之后。那么使用<code>Date</code>完全正确。</strong><br><strong>可是有的服务端实现不是比较时间，而是直接的判断服务器资源文件修改时间，是否和<code>If-Modified-Since</code>所传时间相等。这样使用<code>Date</code>就不能实现正确的再验证，因为<code>Date</code>的时间总不会和服务器资源文件修改时间相等。</strong>  </p>
<p>尽管使用<code>Date</code>可能出现的不正确情况，归结于服务端没有正确的实现 Http 语义。<br><strong>但我还是希望 Volley 也能完全正确的实现 Http 语义，至少同时处理<code>Last-Modified</code>和<code>Date</code>,并且优先使用<code>Last-Modified</code>。</strong>  </p>
<h4 id="5-2-bug">5.2 Bug</h4>
<h5 id="-1-basicnetwork-performrequest-">(1). BasicNetwork.performRequest(…)</h5>
<p>如下代码：  </p>
<pre><code class="lang-java">@Override
public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError {
    ……
    while (true) {
        ……
        try {
            ……
        } catch (IOException e) {
            int statusCode = 0;
            NetworkResponse networkResponse = null;
            ……
            if (responseContents != null) {
              ……
            } else {
                throw new NetworkError(networkResponse);
            }
        }
    }
}
</code></pre>
<p>BasicNetwork.performRequest(…) 最后的  </p>
<pre><code class="lang-java">throw new NetworkError(networkResponse);
</code></pre>
<p>应该是  </p>
<pre><code class="lang-java">throw new NetworkError(e);
</code></pre>
<p>更合理。  </p>
</div><!-- 如果是博客, 显示分享按钮及多说评论框--><!-- 百度分享底部代码--><!-- div(class="bdsharebuttonbox margin-left-4")// a(href="#" class="bds_tsina" data-cmd="tsina" title="分享到新浪微博")
// a(href="#" class="bds_qzone" data-cmd="qzone" title="分享到QQ空间")
// a(href="#" class="bds_weixin" data-cmd="weixin" title="分享到微信")
// a(href="#" class="bds_more" data-cmd="more")
--><div class="div-baidu-share color-red">随手点击下面广告，以支持我们维护本站吧</div><!-- 广告位：728+*90-1 --><script>(function() {
    var s = "_" + Math.random().toString(36).slice(2);
    document.write('<div id="' + s + '"></div>');
    (window.slotbydup=window.slotbydup || []).push({
        id: '2683020',
        container: s,
        size: '728,90',
        display: 'inlay-fix'
    });
})();</script><div style="text-align: left;" id="_aglvkgm6am"><iframe id="iframe2683020_0" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true" align="center,center" frameborder="0" height="90" width="728"></iframe></div><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/os.js"></script><script charset="utf-8" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_002"></script><div id="content-footer" class="content-footer"><p><span class="color-red">阿里、蚂蚁金服</span> (20k-40k，16 薪、期权、六险一金)</p><ul class="little-left"><li><a target="_blank" href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" class="statistics-class">阿里集团、蚂蚁金服(杭北上深广等城市)招聘 Android 开发及架构师， 20k-40k, 16 薪及以上</a><input value="recommend/codekk/job-ali-content-footer" class="statistics-value" type="hidden"></li></ul><p class="font-bold">推荐一个用了两年的理财产品</p><ul class="little-left"><li><a href="http://t.lu.com/r/p0f9=J" target="_blank" class="color-red">平安陆金所</a><br>平安集团旗下，2300 万用户。零活宝 5.5%，1-6 个月 5.5%-7.8%，9-12 个月 6.0%-8.8%。<br>账号资金安全：只能提现到资金转入的银行账户，由平安保险全额担保。<p><span class="font-bold">邀请链接：</span><a href="http://t.lu.com/r/p0f9=J" target="_blank" class="color-red">看看陆金所</a>(此链接注册并认证就送 100 元)</p></li></ul></div><!-- 多说评论框 start--><div id="ds-thread" data-thread-key="54cfab086c4761e5001b2550" data-title="Volley 源码解析 Volley 是 Google 在 2013 I/O 大会上推出的 Android 异步网络请求框架和图片加载框架。特别适合数据量小，通信 @codeKK 开源项目源码分析站" data-url="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" class="ds-thread"><div id="ds-reset"><div style="display: none;" class="ds-meta"><a href="javascript:void(0)" class="ds-like-thread-button ds-rounded"><span class="ds-icon ds-icon-heart"></span> <span class="ds-thread-like-text">喜欢</span><span class="ds-thread-cancel-like">取消喜欢</span></a><span class="ds-like-panel"><span class="ds-highlight">45</span> 人喜欢</span></div><div id="ds-hot-posts" class="ds-rounded"><div class="ds-header ds-gradient-bg">被顶起来的评论</div><ul><li class="ds-post" data-post-id="6279646683584267010"><div class="ds-post-self" data-post-id="6279646683584267010" data-thread-id="1277558844196651098" data-root-id="6213548766373348097" data-source="duoshuo"><div class="ds-avatar" data-user-id="6279645686354936577"><a rel="nofollow author" target="_blank" href="http://weibo.com/2140597245" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6279645686354936577';" title="夜凉之境"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_004.jpg" alt="夜凉之境"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/2140597245" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6279645686354936577';" rel="nofollow" target="_blank" data-user-id="6279645686354936577">夜凉之境</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6213548766373348097"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" title="袁阳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.jpg" alt="袁阳"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978">袁阳</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-11-05T14:22:38+08:00" title="2015年11月5日 下午2:22:38">2015年11月5日</a><div class="ds-ctx-nth" title="2015年11月5日 下午2:22:38">1楼</div></div><div class="ds-ctx-content">Trinea 哥，今天看Volley的DiskBasedCache类，他的原理都懂了，会把服务器相应信息写入磁盘，然后再读磁盘取出缓存，有一些方法不理解：writeInt()，writeLong()方法为什么要进行位运算？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry" data-post-id="6265171521489076993"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/1969035027" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=1525041';" title="中传王正一"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1.jpg" alt="中传王正一"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://weibo.com/1969035027">中传王正一</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-23T17:05:17+08:00" title="2016年3月23日 下午5:05:17">3月23日</a><div class="ds-ctx-nth" title="2016年3月23日 下午5:05:17">2楼</div></div><div class="ds-ctx-content">java的IO本来就是对byte的操作，一个int占4个byte，所以需要按位写入。　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>因为网络字节序是大端字节序，而在80X86平台中，是以小端法存放的，比如我们经过网络发送0x12345678这个整形，但实际上流是0x87654321，</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-05-01T17:16:19+08:00" title="2016年5月1日 下午5:16:19">5月1日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6267016255312495361"><div class="ds-post-self" data-post-id="6267016255312495361" data-thread-id="1277558844196651098" data-root-id="6264403497500803842" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="big"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">big</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6264403497500803842"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="william_ycyh"></div><div class="ds-ctx-body"><div class="ds-ctx-head">william_ycyh<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-21T15:24:58+08:00" title="2016年3月21日 下午3:24:58">3月21日</a><div class="ds-ctx-nth" title="2016年3月21日 下午3:24:58">1楼</div></div><div class="ds-ctx-content">RetryPolicy 如何做到重试的呢？具体流程是什么样的呢 ？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>首
先假设你设置了重试的策略，其次performRequest外面其实是个while 循环。假设在网络请求过程中产生异常， 比如read time 
out， catch 这个异常的代码会看看是否重试，如果是重试，就把这个异常吞掉，然后继续下一次循环，否则，抛出异常，由上一层代码去处理。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-03-28T16:23:48+08:00" title="2016年3月28日 下午4:23:48">3月28日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li></ul></div><a name="respond"></a><div class="ds-login-buttons"><p>社交帐号登录:</p><div class="ds-social-links"><ul class="ds-service-list"><li><a href="http://codekk.duoshuo.com/login/weixin/" rel="nofollow" class="ds-service-link ds-weixin">微信</a></li><li><a href="http://codekk.duoshuo.com/login/weibo/" rel="nofollow" class="ds-service-link ds-weibo">微博</a></li><li><a href="http://codekk.duoshuo.com/login/qq/" rel="nofollow" class="ds-service-link ds-qq">QQ</a></li><li><a href="http://codekk.duoshuo.com/login/renren/" rel="nofollow" class="ds-service-link ds-renren">人人</a></li><li><a class="ds-more-services" href="javascript:void(0)">更多»</a></li></ul><ul class="ds-service-list ds-additional-services"><li><a href="http://codekk.duoshuo.com/login/douban/" rel="nofollow" class="ds-service-link ds-douban">豆瓣</a></li><li><a href="http://codekk.duoshuo.com/login/kaixin/" rel="nofollow" class="ds-service-link ds-kaixin">开心</a></li><li><a href="http://codekk.duoshuo.com/login/baidu/" rel="nofollow" class="ds-service-link ds-baidu">百度</a></li><li><a href="http://codekk.duoshuo.com/login/google/" rel="nofollow" class="ds-service-link ds-google">谷歌</a></li></ul></div></div><div class="ds-replybox"><a class="ds-avatar" href="javascript:void(0);" onclick="return false"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt=""></a><form method="post"><input name="thread_id" value="1277558844196651098" type="hidden">
<input name="parent_id" value="" type="hidden">
<input name="nonce" value="5787af1daea7b" type="hidden"><div class="ds-textarea-wrapper ds-rounded-top"><textarea name="message" title="Ctrl+Enter快捷提交" placeholder="说点什么吧…"></textarea><pre class="ds-hidden-text"></pre></div><div class="ds-post-toolbar"><div class="ds-post-options ds-gradient-bg"><span class="ds-sync"></span></div><button class="ds-post-button" type="submit">发布</button><div class="ds-toolbar-buttons"><a class="ds-toolbar-button ds-add-emote" title="插入表情"></a></div></div></form></div><div class="ds-comments-info"><div class="ds-sort"><a class="ds-order-desc ds-current">最新</a><a class="ds-order-asc">最早</a><a class="ds-order-hot">最热</a></div><ul class="ds-comments-tabs"><li class="ds-tab"><a class="ds-comments-tab-duoshuo ds-current" href="javascript:void(0);"><span class="ds-highlight">96</span>条评论</a></li> <li class="ds-tab"><a class="ds-comments-tab-weibo" href="javascript:void(0);"><span class="ds-highlight">1</span>条新浪微博</a></li> </ul></div><ul class="ds-comments"><li class="ds-post" data-post-id="6304852691331842818"><div class="ds-post-self" data-post-id="6304852691331842818" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="4297674"><a rel="nofollow author" target="_blank" href="http://xiaowutongxue.com/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=4297674';" title="杨 学武"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/100.jpg" alt="杨 学武"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://xiaowutongxue.com/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=4297674';" rel="nofollow" target="_blank" data-user-id="4297674">杨 学武</a></div><p>写的很不错</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-07-08T15:28:30+08:00" title="2016年7月8日 下午3:28:30">7月8日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6291110079194202881"><div class="ds-post-self" data-post-id="6291110079194202881" data-thread-id="1277558844196651098" data-root-id="6265483663429862145" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="dyingearth"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">dyingearth</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6265483663429862145"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901">追风少年</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</a><div class="ds-ctx-nth" title="2016年3月24日 下午1:16:34">1楼</div></div><div class="ds-ctx-content">我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry"><a href="javascript:void(0);" class="ds-expand">还有1条评论</a></li><li class="ds-ctx-entry" style="display:none" data-post-id="6284065526167634690"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="菜鸟程"></div><div class="ds-ctx-body"><div class="ds-ctx-head">菜鸟程<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-05-13T15:03:41+08:00" title="2016年5月13日 下午3:03:41">5月13日</a><div class="ds-ctx-nth" title="2016年5月13日 下午3:03:41">2楼</div></div><div class="ds-ctx-content">因
为每次添加request会做缓存 
如果文件太大会照成oom,如果要解决这个问题，看源码其实我们还有一个办法，就是添加request之前把requests设置
request.setShouldCache(false),对于用法来说 是很不方便的事情　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry" data-post-id="6289272505127404289"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="Conan"></div><div class="ds-ctx-body"><div class="ds-ctx-head">Conan<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-05-27T15:49:25+08:00" title="2016年5月27日 下午3:49:25">5月27日</a><div class="ds-ctx-nth" title="2016年5月27日 下午3:49:25">3楼</div></div><div class="ds-ctx-content">你说的这些和Volley适合频繁的网络请求有什么关系？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>我觉得volley因为用了requestqueue这种方式，所以才适合频繁的请求。<br>文件上传用这个感觉很怪异</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-06-01T14:40:09+08:00" title="2016年6月1日 下午2:40:09">6月1日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6289272505127404289"><div class="ds-post-self" data-post-id="6289272505127404289" data-thread-id="1277558844196651098" data-root-id="6265483663429862145" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="Conan"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">Conan</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6265483663429862145"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901">追风少年</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</a><div class="ds-ctx-nth" title="2016年3月24日 下午1:16:34">1楼</div></div><div class="ds-ctx-content">我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry" data-post-id="6284065526167634690"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="菜鸟程"></div><div class="ds-ctx-body"><div class="ds-ctx-head">菜鸟程<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-05-13T15:03:41+08:00" title="2016年5月13日 下午3:03:41">5月13日</a><div class="ds-ctx-nth" title="2016年5月13日 下午3:03:41">2楼</div></div><div class="ds-ctx-content">因
为每次添加request会做缓存 
如果文件太大会照成oom,如果要解决这个问题，看源码其实我们还有一个办法，就是添加request之前把requests设置
request.setShouldCache(false),对于用法来说 是很不方便的事情　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>你说的这些和Volley适合频繁的网络请求有什么关系？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-05-27T15:49:25+08:00" title="2016年5月27日 下午3:49:25">5月27日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6284065526167634690"><div class="ds-post-self" data-post-id="6284065526167634690" data-thread-id="1277558844196651098" data-root-id="6265483663429862145" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="菜鸟程"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">菜鸟程</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6265483663429862145"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901">追风少年</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</a><div class="ds-ctx-nth" title="2016年3月24日 下午1:16:34">1楼</div></div><div class="ds-ctx-content">我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>因为每次添加request会做缓存 如果文件太大会照成oom,如果要解决这个问题，看源码其实我们还有一个办法，就是添加request之前把requests设置request.setShouldCache(false),对于用法来说 是很不方便的事情</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-05-13T15:03:41+08:00" title="2016年5月13日 下午3:03:41">5月13日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6279646683584267010"><div class="ds-post-self" data-post-id="6279646683584267010" data-thread-id="1277558844196651098" data-root-id="6213548766373348097" data-source="duoshuo"><div class="ds-avatar" data-user-id="6279645686354936577"><a rel="nofollow author" target="_blank" href="http://weibo.com/2140597245" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6279645686354936577';" title="夜凉之境"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_004.jpg" alt="夜凉之境"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/2140597245" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6279645686354936577';" rel="nofollow" target="_blank" data-user-id="6279645686354936577">夜凉之境</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6213548766373348097"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" title="袁阳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.jpg" alt="袁阳"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978">袁阳</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-11-05T14:22:38+08:00" title="2015年11月5日 下午2:22:38">2015年11月5日</a><div class="ds-ctx-nth" title="2015年11月5日 下午2:22:38">1楼</div></div><div class="ds-ctx-content">Trinea 哥，今天看Volley的DiskBasedCache类，他的原理都懂了，会把服务器相应信息写入磁盘，然后再读磁盘取出缓存，有一些方法不理解：writeInt()，writeLong()方法为什么要进行位运算？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry" data-post-id="6265171521489076993"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/1969035027" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=1525041';" title="中传王正一"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1.jpg" alt="中传王正一"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://weibo.com/1969035027">中传王正一</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-23T17:05:17+08:00" title="2016年3月23日 下午5:05:17">3月23日</a><div class="ds-ctx-nth" title="2016年3月23日 下午5:05:17">2楼</div></div><div class="ds-ctx-content">java的IO本来就是对byte的操作，一个int占4个byte，所以需要按位写入。　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>因为网络字节序是大端字节序，而在80X86平台中，是以小端法存放的，比如我们经过网络发送0x12345678这个整形，但实际上流是0x87654321，</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-05-01T17:16:19+08:00" title="2016年5月1日 下午5:16:19">5月1日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6270741101112460034"><div class="ds-post-self" data-post-id="6270741101112460034" data-thread-id="1277558844196651098" data-root-id="6270351593913189122" data-source="duoshuo"><div class="ds-avatar" data-user-id="10748518"><a rel="nofollow author" target="_blank" href="http://www.trinea.cn/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=10748518';" title="Trinea"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_005.jpg" alt="Trinea"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://www.trinea.cn/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=10748518';" rel="nofollow" target="_blank" data-user-id="10748518">Trinea</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6270351593913189122"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="晴天"></div><div class="ds-ctx-body"><div class="ds-ctx-head">晴天<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-04-06T16:06:37+08:00" title="2016年4月6日 下午4:06:37">4月6日</a><div class="ds-ctx-nth" title="2016年4月6日 下午4:06:37">1楼</div></div><div class="ds-ctx-content">图片看不到了老师能修复下吗 <img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/otm_org.gif" alt="[奥特曼]" title="[奥特曼]" class="ds-smiley"> 　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>挂在 GitHub 上，可能需要翻墙</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-04-07T17:18:06+08:00" title="2016年4月7日 下午5:18:06">4月7日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6270351593913189122"><div class="ds-post-self" data-post-id="6270351593913189122" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="晴天"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">晴天</span></div><p>图片看不到了老师能修复下吗 <img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/otm_org.gif" alt="[奥特曼]" title="[奥特曼]" class="ds-smiley"> </p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-04-06T16:06:37+08:00" title="2016年4月6日 下午4:06:37">4月6日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6269865895653278465"><div class="ds-post-self" data-post-id="6269865895653278465" data-thread-id="1277558844196651098" data-root-id="6265483663429862145" data-source="duoshuo"><div class="ds-avatar" data-user-id="6265483589157126914"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" rel="nofollow" target="_blank" data-user-id="6265483589157126914">追风少年</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6265483663429862145"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901">追风少年</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</a><div class="ds-ctx-nth" title="2016年3月24日 下午1:16:34">1楼</div></div><div class="ds-ctx-content">我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li><li class="ds-ctx-entry" data-post-id="6269612531375932162"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="潘飞"></div><div class="ds-ctx-body"><div class="ds-ctx-head">潘飞<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-04-04T16:18:41+08:00" title="2016年4月4日 下午4:18:41">4月4日</a><div class="ds-ctx-nth" title="2016年4月4日 下午4:18:41">2楼</div></div><div class="ds-ctx-content">因为volley中得到结果以后，会把结果加载到内存里，而不是想Retrofit直接把流抛出来。如果大的文件下载，直接加载到内存里，显然是不合理的　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>Retrofit直接把流抛出来，是抛到哪里啊？不都是加载到内存吗？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-04-05T08:41:52+08:00" title="2016年4月5日 上午8:41:52">4月5日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6269612531375932162"><div class="ds-post-self" data-post-id="6269612531375932162" data-thread-id="1277558844196651098" data-root-id="6265483663429862145" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="潘飞"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">潘飞</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6265483663429862145"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901">追风少年</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</a><div class="ds-ctx-nth" title="2016年3月24日 下午1:16:34">1楼</div></div><div class="ds-ctx-content">我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>因为volley中得到结果以后，会把结果加载到内存里，而不是想Retrofit直接把流抛出来。如果大的文件下载，直接加载到内存里，显然是不合理的</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-04-04T16:18:41+08:00" title="2016年4月4日 下午4:18:41">4月4日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6267016255312495361"><div class="ds-post-self" data-post-id="6267016255312495361" data-thread-id="1277558844196651098" data-root-id="6264403497500803842" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="big"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">big</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6264403497500803842"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="william_ycyh"></div><div class="ds-ctx-body"><div class="ds-ctx-head">william_ycyh<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2016-03-21T15:24:58+08:00" title="2016年3月21日 下午3:24:58">3月21日</a><div class="ds-ctx-nth" title="2016年3月21日 下午3:24:58">1楼</div></div><div class="ds-ctx-content">RetryPolicy 如何做到重试的呢？具体流程是什么样的呢 ？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>首
先假设你设置了重试的策略，其次performRequest外面其实是个while 循环。假设在网络请求过程中产生异常， 比如read time 
out， catch 这个异常的代码会看看是否重试，如果是重试，就把这个异常吞掉，然后继续下一次循环，否则，抛出异常，由上一层代码去处理。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-03-28T16:23:48+08:00" title="2016年3月28日 下午4:23:48">3月28日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6265483663429862145"><div class="ds-post-self" data-post-id="6265483663429862145" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="6265483589157126914"><a rel="nofollow author" target="_blank" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" title="追风少年"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="追风少年"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/ZHANGMAN19930901" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6265483589157126914';" rel="nofollow" target="_blank" data-user-id="6265483589157126914">追风少年</a></div><p>我想问一下，为什么volley适合频繁的网络请求，不适合文件上传等大数据请求呢？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-03-24T13:16:34+08:00" title="2016年3月24日 下午1:16:34">3月24日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6265171521489076993"><div class="ds-post-self" data-post-id="6265171521489076993" data-thread-id="1277558844196651098" data-root-id="6213548766373348097" data-source="duoshuo"><div class="ds-avatar" data-user-id="1525041"><a rel="nofollow author" target="_blank" href="http://weibo.com/1969035027" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=1525041';" title="中传王正一"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1.jpg" alt="中传王正一"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/1969035027" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=1525041';" rel="nofollow" target="_blank" data-user-id="1525041">中传王正一</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6213548766373348097"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" title="袁阳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.jpg" alt="袁阳"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978">袁阳</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-11-05T14:22:38+08:00" title="2015年11月5日 下午2:22:38">2015年11月5日</a><div class="ds-ctx-nth" title="2015年11月5日 下午2:22:38">1楼</div></div><div class="ds-ctx-content">Trinea 哥，今天看Volley的DiskBasedCache类，他的原理都懂了，会把服务器相应信息写入磁盘，然后再读磁盘取出缓存，有一些方法不理解：writeInt()，writeLong()方法为什么要进行位运算？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>java的IO本来就是对byte的操作，一个int占4个byte，所以需要按位写入。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-03-23T17:05:17+08:00" title="2016年3月23日 下午5:05:17">3月23日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6264403497500803842"><div class="ds-post-self" data-post-id="6264403497500803842" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="william_ycyh"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">william_ycyh</span></div><p>RetryPolicy 如何做到重试的呢？具体流程是什么样的呢 ？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-03-21T15:24:58+08:00" title="2016年3月21日 下午3:24:58">3月21日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6255182113780269826"><div class="ds-post-self" data-post-id="6255182113780269826" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="6255044132327129858"><a rel="nofollow author" target="_blank" href="http://weibo.com/sahadevsmile" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6255044132327129858';" title="_SAHADEV"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_003.jpg" alt="_SAHADEV"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/sahadevsmile" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6255044132327129858';" rel="nofollow" target="_blank" data-user-id="6255044132327129858">_SAHADEV</a></div><p>Like</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-02-25T19:01:17+08:00" title="2016年2月25日 下午7:01:17">2月25日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6244717255016317698"><div class="ds-post-self" data-post-id="6244717255016317698" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="paceboy"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">paceboy</span></div><p>BasicNetWork 和HttpStack的关系标反了</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-01-28T14:12:17+08:00" title="2016年1月28日 下午2:12:17">1月28日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6241690710555230977"><div class="ds-post-self" data-post-id="6241690710555230977" data-thread-id="1277558844196651098" data-root-id="6213548766373348097" data-source="duoshuo"><div class="ds-avatar" data-user-id="6241689617087595266"><a rel="nofollow author" target="_blank" href="http://t.qq.com/feifei_grass" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6241689617087595266';" title="婷o0o礼安"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50_002.jpg" alt="婷o0o礼安"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/feifei_grass" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=6241689617087595266';" rel="nofollow" target="_blank" data-user-id="6241689617087595266">婷o0o礼安</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6213548766373348097"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" title="袁阳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.jpg" alt="袁阳"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978">袁阳</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-11-05T14:22:38+08:00" title="2015年11月5日 下午2:22:38">2015年11月5日</a><div class="ds-ctx-nth" title="2015年11月5日 下午2:22:38">1楼</div></div><div class="ds-ctx-content">Trinea 哥，今天看Volley的DiskBasedCache类，他的原理都懂了，会把服务器相应信息写入磁盘，然后再读磁盘取出缓存，有一些方法不理解：writeInt()，writeLong()方法为什么要进行位运算？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>因为不同的平台int long等，他们的字节存储的顺序可能是不一样的。<br>可能低位在前或者高位在前。<br>writeInt() 和 readInt()以字节为单位，用一致的顺序读写，就能适配不同的平台。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2016-01-20T10:27:45+08:00" title="2016年1月20日 上午10:27:45">1月20日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6229885520302834433"><div class="ds-post-self" data-post-id="6229885520302834433" data-thread-id="1277558844196651098" data-root-id="1277558844196651600" data-source="duoshuo"><div class="ds-avatar" data-user-id="13125775"><a rel="nofollow author" target="_blank" href="http://weibo.com/2412502694" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=13125775';" title="天青色等煙雨_而我在等妳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_008.jpg" alt="天青色等煙雨_而我在等妳"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/2412502694" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=13125775';" rel="nofollow" target="_blank" data-user-id="13125775">天青色等煙雨_而我在等妳</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="1277558844196651600"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/3721528497" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=11641437';" title="zonda的地盘"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_002.jpg" alt="zonda的地盘"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://weibo.com/3721528497">zonda的地盘</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-05-21T18:26:07+08:00" title="2015年5月21日 下午6:26:07">2015年5月21日</a><div class="ds-ctx-nth" title="2015年5月21日 下午6:26:07">1楼</div></div><div class="ds-ctx-content">楼主有没有觉得ByteArrayPool 中的 byte[] 作为缓存数据的载体，有避免了使用 Java Heap 内存的优势？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>请教一下，这个类是如何避免使用Java Heap啊？不太理解这个问题</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-19T14:57:35+08:00" title="2015年12月19日 下午2:57:35">2015年12月19日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228887199509644034"><div class="ds-post-self" data-post-id="6228887199509644034" data-thread-id="1277558844196651098" data-root-id="6228791154767299330" data-source="duoshuo"><div class="ds-avatar" data-user-id="10748518"><a rel="nofollow author" target="_blank" href="http://www.trinea.cn/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=10748518';" title="Trinea"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_005.jpg" alt="Trinea"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://www.trinea.cn/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=10748518';" rel="nofollow" target="_blank" data-user-id="10748518">Trinea</a></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="6228791154767299330"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="https://jacksunny.github.io/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=11351542';" title="jacks"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.png" alt="jacks"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="https://jacksunny.github.io/">jacks</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-12-16T16:10:53+08:00" title="2015年12月16日 下午4:10:53">2015年12月16日</a><div class="ds-ctx-nth" title="2015年12月16日 下午4:10:53">1楼</div></div><div class="ds-ctx-content">大神，你们图片都挂了，，，看不到图片　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>图片需要翻墙</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-16T22:23:35+08:00" title="2015年12月16日 下午10:23:35">2015年12月16日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228791154767299330"><div class="ds-post-self" data-post-id="6228791154767299330" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="11351542"><a rel="nofollow author" target="_blank" href="https://jacksunny.github.io/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=11351542';" title="jacks"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.png" alt="jacks"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="https://jacksunny.github.io/" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=11351542';" rel="nofollow" target="_blank" data-user-id="11351542">jacks</a></div><p>大神，你们图片都挂了，，，看不到图片</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-16T16:10:53+08:00" title="2015年12月16日 下午4:10:53">2015年12月16日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6227667655801701121"><div class="ds-post-self" data-post-id="6227667655801701121" data-thread-id="1277558844196651098" data-root-id="1277558844196651862" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="Seny"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">Seny</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="1277558844196651862"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/5497967279" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=13295447';" title="向往明天的小菜鸟"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/0.jpg" alt="向往明天的小菜鸟"></a></div><div class="ds-ctx-body"><div class="ds-ctx-head"><a rel="nofollow author" target="_blank" href="http://weibo.com/5497967279">向往明天的小菜鸟</a><a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-08-25T09:19:35+08:00" title="2015年8月25日 上午9:19:35">2015年8月25日</a><div class="ds-ctx-nth" title="2015年8月25日 上午9:19:35">1楼</div></div><div class="ds-ctx-content">如果用的是POST请求，请求参数在header中，所以如果同一个url的多次请求中带的参数是不一样的，他会认为是相同的请求吗？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>Volley对普通网络请求没有做重复过滤，因为不好识别。ImageLoader会对重复图片请求做过滤。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-13T15:31:08+08:00" title="2015年12月13日 下午3:31:08">2015年12月13日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6219108063350096641"><div class="ds-post-self" data-post-id="6219108063350096641" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="艾飞"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">艾飞</span></div><p>我需要携带的对象或者集合怎么弄呢，看volly携带的集合只可以是map的呢</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-11-20T13:55:33+08:00" title="2015年11月20日 下午1:55:33">2015年11月20日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6215825605351441154"><div class="ds-post-self" data-post-id="6215825605351441154" data-thread-id="1277558844196651098" data-root-id="1277558844196651847" data-source="duoshuo"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="大劳"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">大劳</span></div><ol id="ds-ctx"><li class="ds-ctx-entry" data-post-id="1277558844196651847"><div class="ds-avatar"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/140863.jpg" alt="elvis18"></div><div class="ds-ctx-body"><div class="ds-ctx-head">elvis18<a href="http://a.codekk.com/detail/Android/grumoon/undefined" target="_blank" rel="nofollow" class="ds-time" datetime="2015-08-20T10:44:08+08:00" title="2015年8月20日 上午10:44:08">2015年8月20日</a><div class="ds-ctx-nth" title="2015年8月20日 上午10:44:08">1楼</div></div><div class="ds-ctx-content">有一个疑问望解答：<br>当UI线程不断的向队列添加请求，队列如果有大小限制，队列满的时候不会ui线程阻塞么？<br>如果没有大小限制，不会导致oom么？　　　　　　　<div class="ds-comment-actions"><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a></div></div></div></li></ol><p>PriorityBlockingQueue:
一个无界阻塞队列，它使用与类 PriorityQueue 
相同的顺序规则，并且提供了阻塞获取操作。虽然此队列逻辑上是无界的，但是资源被耗尽时试图执行 add 操作也将失败（导致 
OutOfMemoryError）。此类不允许使用 null 元素。依赖自然顺序的优先级队列也不允许插入不可比较的对象（这样做会导致抛出 
ClassCastException）。 <br>=========================================================<br>第一个问题：不会阻塞，只有获取的时候（如果队列为空，则会阻塞）<br>第二个问题：会导致OOM</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-11-11T17:37:56+08:00" title="2015年11月11日 下午5:37:56">2015年11月11日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶(1)</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6213548766373348097"><div class="ds-post-self" data-post-id="6213548766373348097" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="14085473"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" title="袁阳"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/50.jpg" alt="袁阳"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/yuan823978" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=14085473';" rel="nofollow" target="_blank" data-user-id="14085473">袁阳</a></div><p>Trinea 哥，今天看Volley的DiskBasedCache类，他的原理都懂了，会把服务器相应信息写入磁盘，然后再读磁盘取出缓存，有一些方法不理解：writeInt()，writeLong()方法为什么要进行位运算？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-11-05T14:22:38+08:00" title="2015年11月5日 下午2:22:38">2015年11月5日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="1277558844196651980"><div class="ds-post-self" data-post-id="1277558844196651980" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="13833283"><a rel="nofollow author" target="_blank" href="http://weibo.com/xylaiai" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=13833283';" title="Turwe"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_006.jpg" alt="Turwe"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/xylaiai" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=13833283';" rel="nofollow" target="_blank" data-user-id="13833283">Turwe</a></div><p>好
像DiskBasedCache并不是基于SDcard的吧？DiskBasedCache的构造方法传入了一个File对象，而这个File对象是通过
context.getCacheDir()得到的，这个方法得到的路径应该是在Internal 
Storage中的，在存储空间不足的时候会被系统回收。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-10-11T12:27:02+08:00" title="2015年10月11日 下午12:27:02">2015年10月11日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="1277558844196651960"><div class="ds-post-self" data-post-id="1277558844196651960" data-thread-id="1277558844196651098" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="9190102"><a rel="nofollow author" target="_blank" href="http://weibo.com/2667323921" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=9190102';" title="小咖啡漂亮的小白"><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/1_007.jpg" alt="小咖啡漂亮的小白"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/2667323921" onclick="this.href='http://codekk.duoshuo.com/user-url/?user_id=9190102';" rel="nofollow" target="_blank" data-user-id="9190102">小咖啡漂亮的小白</a></div><p>还
是要问一下，那个缓存的机制是需要服务器配合的？也就是说我缓存在磁盘的信息File cacheDir = new 
File(context.getCacheDir(), DEFAULT_CACHE_DIR);  
是没有用的吗？但是我有看到CacheDispatcher又在从磁盘读取数据？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-09-28T11:11:50+08:00" title="2015年9月28日 上午11:11:50">2015年9月28日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li></ul><div class="ds-paginator"><div class="ds-border"></div><a data-page="1" href="javascript:void(0);" class="ds-current">1</a> <a data-page="2" href="javascript:void(0);">2</a> <a data-page="3" href="javascript:void(0);">3</a> <a data-page="4" href="javascript:void(0);">4</a></div><p class="ds-powered-by"><a href="http://duoshuo.com/" target="_blank" rel="nofollow">codeKK正在使用多说</a></p></div></div><!-- 多说评论框 end--><!-- 多说公共JS代码 start (一个网页只需插入一次)--><script>var duoshuoQuery = {short_name:"codekk"};
  (function() {
      var ds = document.createElement('script');
      ds.type = 'text/javascript';ds.async = true;
      ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
      ds.charset = 'UTF-8';
      (document.getElementsByTagName('head')[0] 
       || document.getElementsByTagName('body')[0]).appendChild(ds);
  })();</script><!-- 多说公共JS代码 end--></div><div class="col-md-3 padding-left0"><div class="panel panel-default"><div class="panel-heading one-line">阿里 Android 内推</div><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class color-red">闲鱼、钉钉、淘宝Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">口碑、高德、天猫Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">去啊、菜鸟、蚂蚁Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali3" class="statistics-value" type="hidden"></ul></div><div class="panel panel-default"><div class="panel-heading one-line">推荐一个用了两年的理财</div><ul class="list-group"><a target="_blank" href="http://t.lu.com/r/p0f9=J" title="平安集团旗下，平安集团担保，1500 万用户。零活宝 5.5%，1-3 个月 5.5%-7.0%，3-6 个月 5.8%-7.8%，9-12 个月 6.0%-8.8%。" class="list-group-item statistics-class">平安陆金所—活期4.3%，定期8%+，注册送100元…</a><input value="licai/lufax1" class="statistics-value" type="hidden"></ul></div><div class="panel panel-default"><div class="panel-heading panel-title one-line">微信公众号-Android 经验分享</div><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/weixin-codekk-160.jpg"></div><div class="panel panel-default"><div class="panel-heading one-line">翻_.墙—几十块钱换来大世界</div><ul class="list-group"><a href="http://refyt.com/?r=b5b36c4d20772997" title="翻墙是工程师必备技能，云梯全平台通用，稳定且价格便宜" target="_blank" class="list-group-item sidebar-font statistics-class color-red">全局翻.墙—云梯，合买15元/月，全平台</a><input value="ad/yunti" class="statistics-value" type="hidden"><a href="https://www.digitalocean.com/?refcode=ee8b52337676" title="买 DigitalOcean 洛杉矶的主机自己搭建 Shadowsocks" target="_blank" class="list-group-item sidebar-font statistics-class">VPS 自己搭建 Shadowsocks 全平台通用</a><input value="ad/digitalocean" class="statistics-value" type="hidden"></ul></div><div style="margin-bottom:0px" class="panel panel-default"><ul class="list-group"> <a class="list-group-item">点击下面广告支持我们吧</a></ul></div><!-- 广告位：300*250-2 --><script>(function() {
    var s = "_" + Math.random().toString(36).slice(2);
    document.write('<div id="' + s + '"></div>');
    (window.slotbydup=window.slotbydup || []).push({
        id: '2682119',
        container: s,
        size: '300,250',
        display: 'inlay-fix'
    });
})();</script><div id="_i2cm5y4vyla"><iframe id="iframe2682119_0" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_002.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true" align="center,center" frameborder="0" height="250" width="300"></iframe></div><script charset="utf-8" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm"></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/os.js"></script><div>&nbsp;</div><div class="panel panel-default"><div class="panel-heading">Android 内推</div><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" class="list-group-item sidebar-font statistics-class">北京阿里、蚂蚁 Android 急招</a><input value="recommend/codekk/job-ali100" class="statistics-value" type="hidden"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" class="list-group-item sidebar-font statistics-class">上海阿里、蚂蚁 Android 急招</a><input value="recommend/codekk/job-ali101" class="statistics-value" type="hidden"><a href="http://a.codekk.com/blogs/detail/54f855ced6459ae793499186" class="list-group-item sidebar-font">一起玩耍</a><a href="http://a.codekk.com/blogs/detail/55a780a2d6459ae7934998d0" class="list-group-item sidebar-font">微店</a><a href="http://a.codekk.com/blogs/detail/571e01b04a38205862ef4ac3" class="list-group-item sidebar-font">哔哩哔哩(B站)</a><a href="http://a.codekk.com/blogs/detail/559b4437d6459ae793499805" class="list-group-item sidebar-font">阿里集团</a><a href="http://a.codekk.com/blogs/detail/5651bb3efbbec781c2f7569a" class="list-group-item sidebar-font">Glow</a><a href="http://a.codekk.com/blogs/detail/54f855ced6459ae79349917e" class="list-group-item sidebar-font">魔方天空</a><a href="http://a.codekk.com/blogs/detail/54ffbdc3d6459ae7934991ce" class="list-group-item sidebar-font">233 手游直播</a><a href="http://a.codekk.com/blogs/detail/5651bb3efbbec781c2f75698" class="list-group-item sidebar-font">GrowingIO</a></ul></div><div class="panel panel-default"><div class="panel-heading one-line">推荐一个用了两年的理财</div><ul class="list-group"><a target="_blank" href="http://t.lu.com/r/p0f9=J" title="平安集团旗下，平安集团担保，1500 万用户。零活宝 5.5%，1-3 个月 5.5%-7.0%，3-6 个月 5.8%-7.8%，9-12 个月 6.0%-8.8%。" class="list-group-item statistics-class color-red">平安陆金所—活期4.3%，定期8%+，注册送100元…</a><input value="licai/lufax2" class="statistics-value" type="hidden"></ul></div><!-- Google adsense<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-7076762249726724" data-ad-slot="2520452427" class="adsbygoogle"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});
</script><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins style="display:inline-block;width:300px;height:250px" data-ad-client="ca-pub-7076762249726724" data-ad-slot="3061503626" class="adsbygoogle"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({}); -->
<div class="panel panel-default"><div class="panel-heading">源码解析文章</div><ul class="list-group"><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253c" class="list-group-item sidebar-font">公共技术点之依赖注入 </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2543" class="list-group-item sidebar-font">xUtils </a><a href="http://a.codekk.com/blogs/detail/559623d8d6459ae793499787" class="list-group-item sidebar-font">公共技术点之 Android 动画基础 </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253f" class="list-group-item sidebar-font">公共技术点之 View 绘制流程 </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2541" class="list-group-item sidebar-font">ViewPagerIndicator </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253a" class="list-group-item sidebar-font">PhotoView </a><a href="http://a.codekk.com/blogs/detail/5595d64ed6459ae793499761" class="list-group-item sidebar-font">CalendarListView </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2540" class="list-group-item sidebar-font">Android-Universal-Image-Loader </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2536" class="list-group-item sidebar-font">CircularFloatingActionMenu </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2538" class="list-group-item sidebar-font">EventBus </a><a href="http://a.codekk.com/blogs/detail/5595d64dd6459ae79349975a" class="list-group-item sidebar-font">android-Ultra-Pull-To-Refresh </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253e" class="list-group-item sidebar-font">公共技术点之 View 事件传递 </a><a href="http://a.codekk.com/blogs/detail/5595d64dd6459ae79349975b" class="list-group-item sidebar-font">DynamicLoadApk </a><a href="http://a.codekk.com/blogs/detail/5595d64dd6459ae79349975e" class="list-group-item sidebar-font">Side Menu.Android </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253d" class="list-group-item sidebar-font">Jave Proxy </a><a href="http://a.codekk.com/blogs/detail/5595d64ed6459ae793499764" class="list-group-item sidebar-font">PagerSlidingTabStrip </a><a href="http://a.codekk.com/blogs/detail/5595d64ed6459ae79349975f" class="list-group-item sidebar-font">cling </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b253b" class="list-group-item sidebar-font">公共技术点之 Java 注解 Annotation </a><a href="http://a.codekk.com/blogs/detail/5596953ed6459ae7934997c5" class="list-group-item sidebar-font">公共技术点之 Java 反射 Reflection </a><a href="http://a.codekk.com/blogs/detail/5595d64dd6459ae79349975c" class="list-group-item sidebar-font">BaseAdapterHelper </a><a href="http://a.codekk.com/blogs/detail/5595d64ed6459ae793499760" class="list-group-item sidebar-font">discreteSeekBar </a><a href="http://a.codekk.com/blogs/detail/5595d64ed6459ae793499763" class="list-group-item sidebar-font">SlidingMenu </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2539" class="list-group-item sidebar-font">HoloGraphLibrary </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2535" class="list-group-item sidebar-font">android-lockpattern </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2542" class="list-group-item sidebar-font">Volley </a><a href="http://a.codekk.com/blogs/detail/54cfab086c4761e5001b2537" class="list-group-item sidebar-font">Dagger </a><a href="http://a.codekk.com/blogs/detail/5595d64dd6459ae79349975d" class="list-group-item sidebar-font">NineOldAnimations </a></ul></div><div class="panel panel-default"><div class="panel-heading one-line">阿里 Android 内推</div><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">淘宝、闲鱼、钉钉Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali4" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class color-red">天猫、口碑、高德Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali5" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">蚂蚁、去啊、菜鸟Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali6" class="statistics-value" type="hidden"></ul></div><div style="margin-bottom:0px" class="panel panel-default"><ul class="list-group"> <a class="list-group-item">点击下面广告支持我们吧</a></ul></div><!-- 广告位：300*250+-3 --><script>(function() {
    var s = "_" + Math.random().toString(36).slice(2);
    document.write('<div id="' + s + '"></div>');
    (window.slotbydup=window.slotbydup || []).push({
        id: '2704629',
        container: s,
        size: '300,250',
        display: 'inlay-fix'
    });
})();</script><div style="text-align: left;" id="_s8ghkvx3a1q"><iframe id="iframe2704629_0" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_003.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true" align="center,center" frameborder="0" height="250" width="300"></iframe></div><script charset="utf-8" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_003"></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/os.js"></script><div>&nbsp;</div><div class="panel panel-default"><div class="panel-heading">精选文章</div><ul class="list-group"><a href="http://a.codekk.com/blogs/detail/5513fd53d6459ae7934992d6" class="list-group-item sidebar-font">国外著名 Android 开发者及公司信息</a><a href="http://a.codekk.com/blogs/detail/5705bcdf4a38205862ef476f" class="list-group-item sidebar-font">推荐两个技术简历模板</a><a href="http://a.codekk.com/blogs/detail/55161391d6459ae7934992e7" class="list-group-item sidebar-font">Facebook 再次重磅投下几个开源库</a><a href="http://a.codekk.com/blogs/detail/55066239d6459ae793499214" class="list-group-item sidebar-font">Android 开源项目源码解析公共模板</a><a href="http://a.codekk.com/blogs/detail/55ae41f4d6459ae79349996f" class="list-group-item sidebar-font">Android 开源汇总项目改版意见收集</a><a href="http://a.codekk.com/blogs/detail/55538870d6459ae793499533" class="list-group-item sidebar-font">移动端网络优化</a><a href="http://a.codekk.com/blogs/detail/55119382d6459ae79349928a" class="list-group-item sidebar-font">Facebook 的那些开源项目</a><a href="http://a.codekk.com/blogs/detail/565549e2fbbec781c2f75821" class="list-group-item sidebar-font">Android 三大图片缓存原理、特性对比</a><a href="http://a.codekk.com/blogs/detail/550596a5d6459ae7934991d6" class="list-group-item sidebar-font">用于内推和招人的开源项目</a><a href="http://a.codekk.com/blogs/detail/5705bcdf4a38205862ef4770" class="list-group-item sidebar-font">一大半以上简历都是不合格的</a><a href="http://a.codekk.com/blogs/detail/55538870d6459ae793499532" class="list-group-item sidebar-font">那些生僻的开源库系列 1</a><a href="http://a.codekk.com/blogs/detail/55538870d6459ae793499534" class="list-group-item sidebar-font">Yalantis 那些动画酷炫的 Android 及 iOS 开源项目</a><a href="http://a.codekk.com/blogs/detail/566db0b1fbbec781c2f75cf2" class="list-group-item sidebar-font">网站广告位出租</a><a href="http://a.codekk.com/blogs/detail/5527375bd6459ae793499404" class="list-group-item sidebar-font">那份我期盼的简历</a><a href="http://a.codekk.com/blogs/detail/55120a50d6459ae7934992ca" class="list-group-item sidebar-font">Android 开源项目及其学习</a></ul></div><div class="panel panel-default"><div class="panel-heading panel-title one-line">微信公众号-Android 经验分享</div><img src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/weixin-codekk-160.jpg"></div><div class="panel panel-default"><div class="panel-heading one-line">阿里 Android 内推</div><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">淘宝、闲鱼、钉钉Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali7" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class">天猫、口碑、高德Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali8" class="statistics-value" type="hidden"></ul><ul class="list-group"><a href="http://www.trinea.cn/android/%E9%98%BF%E9%87%8C%E9%9B%86%E5%9B%A2%E3%80%81%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E6%9D%AD%E6%8B%9B%E8%81%98-android-ios-%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%81/" target="_blank" title="阿里集团(淘宝、天猫、阿里云、B2B、菜鸟、钉钉、闲鱼、高德、口碑、UC、友盟、神马搜索、阿里旅行、阿里文学、口碑、阿里健康)、蚂蚁金服杭州、北京、上海、深圳、广州招聘 Android, 20k-40k, 16薪以上、六险一金" class="list-group-item sidebar-font statistics-class color-red">蚂蚁、去啊、菜鸟Android, 20k-45k, 16薪</a><input value="recommend/codekk/job-ali9" class="statistics-value" type="hidden"></ul></div><div class="panel panel-default"><div class="panel-heading one-line">翻_.墙—几十块钱换来大世界</div><ul class="list-group"><a href="http://refyt.com/?r=b5b36c4d20772997" title="翻墙是工程师必备技能，云梯全平台通用，稳定且价格便宜" target="_blank" class="list-group-item sidebar-font statistics-class">全局翻.墙—云梯，合买15元/月，全平台</a><input value="ad/yunti2" class="statistics-value" type="hidden"><a href="https://www.digitalocean.com/?refcode=ee8b52337676" title="买 DigitalOcean 洛杉矶的主机自己搭建 Shadowsocks" target="_blank" class="list-group-item sidebar-font statistics-class">VPS 自己搭建 Shadowsocks 全平台通用</a><input value="ad/digitalocean2" class="statistics-value" type="hidden"></ul></div><div class="panel panel-default"><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=506988872&amp;idx=1&amp;sn=eaf9b271b47649ff8b8222914c14a5b3#rd" class="list-group-item sidebar-font statistics-class">最近有几个开源项目值得介绍下</a><input value="recommend/weixin/open-project-desc-recently2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=506988859&amp;idx=1&amp;sn=8bbd8521337fb67a343150ddad59a18a#rd" class="list-group-item sidebar-font statistics-class">FB App 优化工具 ReDex 优化的 6 点及未优化的一大方面</a><input value="recommend/weixin/facebook-redex2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=405319124&amp;idx=1&amp;sn=1451f3e9ce9787b3576088c10bc9eac1#rd" class="list-group-item sidebar-font statistics-class">80% 以上简历都是不合格的</a><input value="recommend/weixin/resume-unqualified2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=406353093&amp;idx=1&amp;sn=913d388ba08eb41430b131ec05ee1b9d#rd" class="list-group-item sidebar-font statistics-class">推荐两个技术简历模板</a><input value="recommend/weixin/resume-template2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=405919721&amp;idx=1&amp;sn=fdad21c0bc74d90e66443d488e8cdc8f#rd" class="list-group-item sidebar-font statistics-class">为 Apk 动态写入信息的 Hack 方式</a><input value="recommend/weixin/apk-modify-hack2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=405475595&amp;idx=1&amp;sn=5bb0c2a6f1da40ee12048e5093d78c96#rd" class="list-group-item sidebar-font statistics-class">Android HTTPS 你们用的对吗</a><input value="recommend/weixin/android-https2" class="statistics-value" type="hidden"></ul><ul class="list-group"><a target="_blank" href="http://mp.weixin.qq.com/s?__biz=MzAxNjI3MDkzOQ==&amp;mid=405513160&amp;idx=1&amp;sn=0f040112b7e169c85e616d2a3d685083#rd" class="list-group-item sidebar-font statistics-class">土豪阿里腾讯不一样的买房福利</a><input value="recommend/weixin/android-n-adaptation2" class="statistics-value" type="hidden"></ul></div><div style="margin-bottom:0px" class="panel panel-default"><ul class="list-group"> <a class="list-group-item">点击下面广告支持我们吧</a></ul></div><!-- 广告位：300*250+-1 --><script>(function() {
    var s = "_" + Math.random().toString(36).slice(2);
    document.write('<div id="' + s + '"></div>');
    (window.slotbydup=window.slotbydup || []).push({
        id: '2681932',
        container: s,
        size: '300,250',
        display: 'inlay-fix'
    });
})();</script><div style="text-align: left;" id="_ntioerpz2j"><iframe id="iframe2681932_0" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_004.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" style="border:0; vertical-align:bottom;margin:0;" allowtransparency="true" align="center,center" frameborder="0" height="250" width="300"></iframe></div><script charset="utf-8" src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/lcxm_004"></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/os.js"></script><div>&nbsp;</div><div class="panel panel-default"><div class="panel-heading one-line">翻_.墙—几十块钱换来大世界</div><ul class="list-group"><a href="http://refyt.com/?r=b5b36c4d20772997" title="翻墙是工程师必备技能，云梯全平台通用，稳定且价格便宜" target="_blank" class="list-group-item sidebar-font statistics-class color-red">全局翻.墙—云梯，合买15元/月，全平台</a><input value="ad/yunti" class="statistics-value" type="hidden"><a href="https://www.digitalocean.com/?refcode=ee8b52337676" title="买 DigitalOcean 洛杉矶的主机自己搭建 Shadowsocks" target="_blank" class="list-group-item sidebar-font statistics-class">VPS 自己搭建 Shadowsocks 全平台通用</a><input value="ad/digitalocean" class="statistics-value" type="hidden"></ul></div><div class="panel panel-default"><div class="panel-heading one-line">推荐一个用了两年的理财</div><ul class="list-group"><a target="_blank" href="http://t.lu.com/r/p0f9=J" title="平安集团旗下，平安集团担保，1500 万用户。零活宝 5.5%，1-3 个月 5.5%-7.0%，3-6 个月 5.8%-7.8%，9-12 个月 6.0%-8.8%。" class="list-group-item statistics-class">平安陆金所—活期4.3%，定期8%+，注册送100元…</a><input value="licai/lufax3" class="statistics-value" type="hidden"></ul></div></div></div><div class="footer-div">© 2015-2016 Powered by <a href="http://www.trinea.cn/" target="_blank">trinea.cn</a> and <a href="https://github.com/android-cn" target="_blank">android-cn</a></div><!-- 百度分享底部或右侧代码--><!-- if blog || project || article// script.
  // window._bd_share_config={"common":{"bdSnsKey":{"tsina":"3253727932"},"bdText":"","bdMini":"1","bdMiniList":["mshare","tqq","youdao","bdhome","diandian","renren","twi","fbook"],"bdPic":"","bdStyle":"0","bdSize":"32"},"share":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];
--><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/jquery.js"></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/common.js"></script><script src="Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_files/bootstrap.js"></script><!-- Google Analytics--><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-59203246-1', 'auto');
ga('send', 'pageview');</script></body></html>